import { Column, CreateDateColumn, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';
import { CalculationType } from '../enums/calculation-type.enum';
import { Patient } from '../../patients/entities/patient.entity';
import { User } from '../../users/entities/user.entity';

/**
 * Entidade que representa um registro de cálculo metabólico realizado para um paciente.
 * 
 * Armazena informações sobre cálculos metabólicos (IMC, BMR, TDEE) incluindo
 * o tipo de cálculo, dados de entrada dinâmicos e os resultados gerados.
 * Cada registro está associado a um paciente específico e ao usuário que
 * realizou o cálculo.
 * 
 * @class MetabolicCalculation
 * @entity metabolic_calculations
 */
@Entity('metabolic_calculations')
export class MetabolicCalculation {
  /**
   * Identificador único do cálculo metabólico.
   * Gerado automaticamente como UUID.
   * 
   * @type {string}
   * @primaryKey
   */
  @PrimaryGeneratedColumn('uuid')
  id: string;

  /**
   * Paciente ao qual este cálculo pertence.
   * Relacionamento obrigatório - cálculo deve estar vinculado a um paciente.
   * 
   * @type {Patient}
   * @relation ManyToOne
   * @cascade DELETE - se paciente for removido, cálculos são removidos
   * @required
   */
  @ManyToOne(() => Patient, { nullable: false, onDelete: 'CASCADE' })
  patient: Patient;

  /**
   * Usuário (médico) que realizou o cálculo.
   * Pode ser nulo se o usuário for removido do sistema.
   * 
   * @type {User | null}
   * @relation ManyToOne
   * @cascade SET NULL - se usuário for removido, campo fica nulo
   * @nullable
   */
  @ManyToOne(() => User, { nullable: true, onDelete: 'SET NULL' })
  user: User;

  /**
   * Tipo de cálculo metabólico realizado.
   * Define qual tipo de cálculo foi executado (BMI, BMR ou TDEE).
   * 
   * @type {CalculationType}
   * @enum BMI, BMR, TDEE
   * @required
   */
  @Column({ type: 'enum', enum: CalculationType })
  calculationType: CalculationType;

  /**
   * Dados de entrada utilizados no cálculo.
   * Estrutura dinâmica contendo os parâmetros necessários para o cálculo.
   * 
   * @type {Record<string, any>}
   * @format JSONB
   * @required
   * @example { "weight": 70, "height": 1.75, "age": 30, "gender": "male" }
   */
  @Column({ type: 'jsonb', name: 'input_data' })
  inputData: Record<string, any>;

  /**
   * Resultados gerados pelo cálculo.
   * Estrutura dinâmica contendo os valores calculados e métricas derivadas.
   * 
   * @type {Record<string, any>}
   * @format JSONB
   * @required
   * @example { "bmi": 22.86, "category": "normal", "interpretation": "Peso normal" }
   */
  @Column({ type: 'jsonb' })
  results: Record<string, any>;

  /**
   * Data e hora de criação do registro.
   * Preenchida automaticamente no momento da criação.
   * 
   * @type {Date}
   * @autoGenerated
   */
  @CreateDateColumn({ name: 'created_at' })
  createdAt: Date;
}


